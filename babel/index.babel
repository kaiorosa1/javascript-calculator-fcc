class App extends React.Component {
  render() {
    return (
      <div>
        <h1>JavaScript Calculator</h1>
        <Calculator />
      </div>
    );
  }
}

class Calculator extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      text: " ",
      preValue: 0,
      oprator: ""
    };
    this.changeDisplay = this.changeDisplay.bind(this);
    this.setPreValue = this.setPreValue.bind(this);
  }
  changeDisplay(newText) {
    this.setState({
      text: newText
    });
  }
  // think of a better name for this function
  setPreValue(val,op) {
    this.setState({
      preValue: val,
      operator: op
    });
  }
  render() {
    return (
      <div id="calculator">
        <Display text={this.state.text} />
        <CalculatorPad
          text={this.state.text}
          changeDisplay={this.changeDisplay}
          setPreValue = {this.setPreValue}
          getValue = {this.state.preValue}
        />
      </div>
    );
  }
}

class Display extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h2 id="display">{this.props.text}</h2>
      </div>
    );
  }
}

class CalculatorPad extends React.Component {
  constructor(props) {
    super(props);
    this.sendToDisplay = this.sendToDisplay.bind(this);
    this.clearDisplay = this.clearDisplay.bind(this);
    this.setOperation = this.setOperation.bind(this);
    this.getResult = this.getResult.bind(this);
  }
  sendToDisplay(e) {
    const displayText = this.props.text;
    const dataValue = document
      .getElementById(e.target.id)
      .getAttribute("data-value");
    let displayedData;

    displayedData = displayText.concat(dataValue);
    this.props.changeDisplay(displayedData);
  }
  clearDisplay() {
    this.props.setPreValue(0,"");
    this.props.changeDisplay("0");
    
  }

  setOperation(e) {
    
    this.props.setPreValue(Number(this.props.text),e.target.id);
    this.props.changeDisplay(" ");
    
  }
  
  getResult(){
    // Verify operation
    
    // Addition
    let result  = Number(this.props.text) + Number(this.props.getValue);
    
    this.props.changeDisplay(result);
    
  }
  render() {
    return (
      <div id="pad">
        <div id="numbers">
          <div id="zero" onClick={this.sendToDisplay} data-value="0">
            0
          </div>
          <div id="one" onClick={this.sendToDisplay} data-value="1">
            1
          </div>
          <div id="two" onClick={this.sendToDisplay} data-value="2">
            2
          </div>
          <div id="three" onClick={this.sendToDisplay} data-value="3">
            3
          </div>
          <div id="four" onClick={this.sendToDisplay} data-value="4">
            4
          </div>
          <div id="five" onClick={this.sendToDisplay} data-value="5">
            5
          </div>
          <div id="six" onClick={this.sendToDisplay} data-value="6">
            6
          </div>
          <div id="seven" onClick={this.sendToDisplay} data-value="7">
            7
          </div>
          <div id="eight" onClick={this.sendToDisplay} data-value="8">
            8
          </div>
          <div id="nine" onClick={this.sendToDisplay} data-value="9">
            9
          </div>
        </div>
        <div id="functionality">
          <div id="decimal">.</div>
          <div id="clear" onClick={this.clearDisplay}>
            AC
          </div>
          <div id="multiply">X</div>
          <div id="divide">/</div>
          <div id="add" onClick={this.setOperation}>
            +
          </div>
          <div id="subtract">-</div>
          <div>Ans</div>
          <div id="equals" onClick={this.getResult}>=</div>
        </div>
      </div>
    );
  }
}

ReactDOM.render(<App />, document.getElementById("app"));
